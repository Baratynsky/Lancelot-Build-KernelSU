name: Build Kernel with KernelSU

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04
    env:
      KERNEL_DIR: android_kernel_xiaomi_mt6768
      DEFCONFIG: lancelot_defconfig
      ARCH: arm64
      SUBARCH: arm64
      CLANG_DIR: clang
      ANY_KERNEL_DIR: AnyKernel3

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3 binutils-aarch64-linux-gnu

    - name: Clone Kernel Source
      run: |
        git clone --depth=1 --branch=kernel-tree \
        https://github.com/Jbub5/android_kernel_xiaomi_mt6768 ${{ env.KERNEL_DIR }}

    - name: Setup ZyC Clang
      run: |
        mkdir ${{ env.CLANG_DIR }}
        curl -L https://github.com/ZyCromerZ/Clang/archive/refs/tags/21.0.0git-20250214-release.tar.gz | tar -xz -C ${{ env.CLANG_DIR }} --strip-components=1

    - name: Clone AnyKernel3
      run: |
        git clone --depth=1 --branch=proton \
        https://github.com/Jbub5/AnyKernel3.git ${{ env.ANY_KERNEL_DIR }}

    - name: Integrate KernelSU
      working-directory: ${{ env.KERNEL_DIR }}
      run: |
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -s v1.0.3

    - name: Configure Kernel
      working-directory: ${{ env.KERNEL_DIR }}
      run: |
        make O=out CC=${{ github.workspace }}/${{ env.CLANG_DIR }}/bin/clang \
        ARCH=${{ env.ARCH }} \
        CLANG_TRIPLE=aarch64-linux-gnu- \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi- \
        ${{ env.DEFCONFIG }}

        # Enable KernelSU required options
        ./scripts/config --file out/.config \
          -e KPROBES \
          -e OVERLAY_FS \
          -e KSU
        make O=out CC=${{ github.workspace }}/${{ env.CLANG_DIR }}/bin/clang olddefconfig

    - name: Build Kernel
      working-directory: ${{ env.KERNEL_DIR }}
      run: |
        make -j$(nproc --all) O=out CC=${{ github.workspace }}/${{ env.CLANG_DIR }}/bin/clang \
        ARCH=${{ env.ARCH }} \
        CLANG_TRIPLE=aarch64-linux-gnu- \
        CROSS_COMPILE=aarch64-linux-gnu- \
        CROSS_COMPILE_ARM32=arm-linux-gnueabi-

    - name: Prepare AnyKernel3
      run: |
        cp ${{ env.KERNEL_DIR }}/out/arch/${{ env.ARCH }}/boot/Image.gz-dtb ${{ env.ANY_KERNEL_DIR }}/
        cp ${{ env.KERNEL_DIR }}/out/arch/${{ env.ARCH }}/boot/dtbo.img ${{ env.ANY_KERNEL_DIR }}/ 2>/dev/null || true

    - name: Create Flashable Zip
      working-directory: ${{ env.ANY_KERNEL_DIR }}
      run: |
        ZIP_NAME="KernelSU-$(date +'%Y%m%d-%H%M').zip"
        zip -r9 "${ZIP_NAME}" * -x .git*

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: Kernel-Zip
        path: ${{ env.ANY_KERNEL_DIR }}/*.zip
